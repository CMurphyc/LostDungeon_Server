// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RoomInfo.proto

#ifndef PROTOBUF_RoomInfo_2eproto__INCLUDED
#define PROTOBUF_RoomInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_RoomInfo_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsRoomInfoImpl();
void InitDefaultsRoomInfo();
inline void InitDefaults() {
  InitDefaultsRoomInfo();
}
}  // namespace protobuf_RoomInfo_2eproto
class RoomInfo;
class RoomInfoDefaultTypeInternal;
extern RoomInfoDefaultTypeInternal _RoomInfo_default_instance_;

enum RoomType {
  PVE = 0,
  PVP = 1,
  RoomType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  RoomType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool RoomType_IsValid(int value);
const RoomType RoomType_MIN = PVE;
const RoomType RoomType_MAX = PVP;
const int RoomType_ARRAYSIZE = RoomType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RoomType_descriptor();
inline const ::std::string& RoomType_Name(RoomType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RoomType_descriptor(), value);
}
inline bool RoomType_Parse(
    const ::std::string& name, RoomType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RoomType>(
    RoomType_descriptor(), name, value);
}
// ===================================================================

class RoomInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RoomInfo) */ {
 public:
  RoomInfo();
  virtual ~RoomInfo();

  RoomInfo(const RoomInfo& from);

  inline RoomInfo& operator=(const RoomInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RoomInfo(RoomInfo&& from) noexcept
    : RoomInfo() {
    *this = ::std::move(from);
  }

  inline RoomInfo& operator=(RoomInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RoomInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoomInfo* internal_default_instance() {
    return reinterpret_cast<const RoomInfo*>(
               &_RoomInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(RoomInfo* other);
  friend void swap(RoomInfo& a, RoomInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RoomInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  RoomInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RoomInfo& from);
  void MergeFrom(const RoomInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RoomInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string owner = 4;
  void clear_owner();
  static const int kOwnerFieldNumber = 4;
  const ::std::string& owner() const;
  void set_owner(const ::std::string& value);
  #if LANG_CXX11
  void set_owner(::std::string&& value);
  #endif
  void set_owner(const char* value);
  void set_owner(const char* value, size_t size);
  ::std::string* mutable_owner();
  ::std::string* release_owner();
  void set_allocated_owner(::std::string* owner);

  // int32 roomid = 1;
  void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // int32 maxsize = 2;
  void clear_maxsize();
  static const int kMaxsizeFieldNumber = 2;
  ::google::protobuf::int32 maxsize() const;
  void set_maxsize(::google::protobuf::int32 value);

  // int32 currentsize = 3;
  void clear_currentsize();
  static const int kCurrentsizeFieldNumber = 3;
  ::google::protobuf::int32 currentsize() const;
  void set_currentsize(::google::protobuf::int32 value);

  // .RoomType roomType = 5;
  void clear_roomtype();
  static const int kRoomTypeFieldNumber = 5;
  ::RoomType roomtype() const;
  void set_roomtype(::RoomType value);

  // @@protoc_insertion_point(class_scope:RoomInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr owner_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int32 maxsize_;
  ::google::protobuf::int32 currentsize_;
  int roomtype_;
  mutable int _cached_size_;
  friend struct ::protobuf_RoomInfo_2eproto::TableStruct;
  friend void ::protobuf_RoomInfo_2eproto::InitDefaultsRoomInfoImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RoomInfo

// int32 roomid = 1;
inline void RoomInfo::clear_roomid() {
  roomid_ = 0;
}
inline ::google::protobuf::int32 RoomInfo::roomid() const {
  // @@protoc_insertion_point(field_get:RoomInfo.roomid)
  return roomid_;
}
inline void RoomInfo::set_roomid(::google::protobuf::int32 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:RoomInfo.roomid)
}

// int32 maxsize = 2;
inline void RoomInfo::clear_maxsize() {
  maxsize_ = 0;
}
inline ::google::protobuf::int32 RoomInfo::maxsize() const {
  // @@protoc_insertion_point(field_get:RoomInfo.maxsize)
  return maxsize_;
}
inline void RoomInfo::set_maxsize(::google::protobuf::int32 value) {
  
  maxsize_ = value;
  // @@protoc_insertion_point(field_set:RoomInfo.maxsize)
}

// int32 currentsize = 3;
inline void RoomInfo::clear_currentsize() {
  currentsize_ = 0;
}
inline ::google::protobuf::int32 RoomInfo::currentsize() const {
  // @@protoc_insertion_point(field_get:RoomInfo.currentsize)
  return currentsize_;
}
inline void RoomInfo::set_currentsize(::google::protobuf::int32 value) {
  
  currentsize_ = value;
  // @@protoc_insertion_point(field_set:RoomInfo.currentsize)
}

// string owner = 4;
inline void RoomInfo::clear_owner() {
  owner_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RoomInfo::owner() const {
  // @@protoc_insertion_point(field_get:RoomInfo.owner)
  return owner_.GetNoArena();
}
inline void RoomInfo::set_owner(const ::std::string& value) {
  
  owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RoomInfo.owner)
}
#if LANG_CXX11
inline void RoomInfo::set_owner(::std::string&& value) {
  
  owner_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RoomInfo.owner)
}
#endif
inline void RoomInfo::set_owner(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RoomInfo.owner)
}
inline void RoomInfo::set_owner(const char* value, size_t size) {
  
  owner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RoomInfo.owner)
}
inline ::std::string* RoomInfo::mutable_owner() {
  
  // @@protoc_insertion_point(field_mutable:RoomInfo.owner)
  return owner_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RoomInfo::release_owner() {
  // @@protoc_insertion_point(field_release:RoomInfo.owner)
  
  return owner_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RoomInfo::set_allocated_owner(::std::string* owner) {
  if (owner != NULL) {
    
  } else {
    
  }
  owner_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), owner);
  // @@protoc_insertion_point(field_set_allocated:RoomInfo.owner)
}

// .RoomType roomType = 5;
inline void RoomInfo::clear_roomtype() {
  roomtype_ = 0;
}
inline ::RoomType RoomInfo::roomtype() const {
  // @@protoc_insertion_point(field_get:RoomInfo.roomType)
  return static_cast< ::RoomType >(roomtype_);
}
inline void RoomInfo::set_roomtype(::RoomType value) {
  
  roomtype_ = value;
  // @@protoc_insertion_point(field_set:RoomInfo.roomType)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::RoomType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RoomType>() {
  return ::RoomType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RoomInfo_2eproto__INCLUDED
