// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LoginS2C.proto

#ifndef PROTOBUF_LoginS2C_2eproto__INCLUDED
#define PROTOBUF_LoginS2C_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_LoginS2C_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsLoginS2CImpl();
void InitDefaultsLoginS2C();
inline void InitDefaults() {
  InitDefaultsLoginS2C();
}
}  // namespace protobuf_LoginS2C_2eproto
class LoginS2C;
class LoginS2CDefaultTypeInternal;
extern LoginS2CDefaultTypeInternal _LoginS2C_default_instance_;

enum LoginS2C_LoginRet {
  LoginS2C_LoginRet_LOGIN_SUCCESS = 0,
  LoginS2C_LoginRet_WRONG_PASSWORD = 1,
  LoginS2C_LoginRet_NONE_USERNAME = 2,
  LoginS2C_LoginRet_ALREADY_ONLINE = 3,
  LoginS2C_LoginRet_SERVER_FULL = 4,
  LoginS2C_LoginRet_LoginS2C_LoginRet_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  LoginS2C_LoginRet_LoginS2C_LoginRet_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool LoginS2C_LoginRet_IsValid(int value);
const LoginS2C_LoginRet LoginS2C_LoginRet_LoginRet_MIN = LoginS2C_LoginRet_LOGIN_SUCCESS;
const LoginS2C_LoginRet LoginS2C_LoginRet_LoginRet_MAX = LoginS2C_LoginRet_SERVER_FULL;
const int LoginS2C_LoginRet_LoginRet_ARRAYSIZE = LoginS2C_LoginRet_LoginRet_MAX + 1;

const ::google::protobuf::EnumDescriptor* LoginS2C_LoginRet_descriptor();
inline const ::std::string& LoginS2C_LoginRet_Name(LoginS2C_LoginRet value) {
  return ::google::protobuf::internal::NameOfEnum(
    LoginS2C_LoginRet_descriptor(), value);
}
inline bool LoginS2C_LoginRet_Parse(
    const ::std::string& name, LoginS2C_LoginRet* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LoginS2C_LoginRet>(
    LoginS2C_LoginRet_descriptor(), name, value);
}
// ===================================================================

class LoginS2C : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LoginS2C) */ {
 public:
  LoginS2C();
  virtual ~LoginS2C();

  LoginS2C(const LoginS2C& from);

  inline LoginS2C& operator=(const LoginS2C& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginS2C(LoginS2C&& from) noexcept
    : LoginS2C() {
    *this = ::std::move(from);
  }

  inline LoginS2C& operator=(LoginS2C&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginS2C& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginS2C* internal_default_instance() {
    return reinterpret_cast<const LoginS2C*>(
               &_LoginS2C_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(LoginS2C* other);
  friend void swap(LoginS2C& a, LoginS2C& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginS2C* New() const PROTOBUF_FINAL { return New(NULL); }

  LoginS2C* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoginS2C& from);
  void MergeFrom(const LoginS2C& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoginS2C* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef LoginS2C_LoginRet LoginRet;
  static const LoginRet LOGIN_SUCCESS =
    LoginS2C_LoginRet_LOGIN_SUCCESS;
  static const LoginRet WRONG_PASSWORD =
    LoginS2C_LoginRet_WRONG_PASSWORD;
  static const LoginRet NONE_USERNAME =
    LoginS2C_LoginRet_NONE_USERNAME;
  static const LoginRet ALREADY_ONLINE =
    LoginS2C_LoginRet_ALREADY_ONLINE;
  static const LoginRet SERVER_FULL =
    LoginS2C_LoginRet_SERVER_FULL;
  static inline bool LoginRet_IsValid(int value) {
    return LoginS2C_LoginRet_IsValid(value);
  }
  static const LoginRet LoginRet_MIN =
    LoginS2C_LoginRet_LoginRet_MIN;
  static const LoginRet LoginRet_MAX =
    LoginS2C_LoginRet_LoginRet_MAX;
  static const int LoginRet_ARRAYSIZE =
    LoginS2C_LoginRet_LoginRet_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LoginRet_descriptor() {
    return LoginS2C_LoginRet_descriptor();
  }
  static inline const ::std::string& LoginRet_Name(LoginRet value) {
    return LoginS2C_LoginRet_Name(value);
  }
  static inline bool LoginRet_Parse(const ::std::string& name,
      LoginRet* value) {
    return LoginS2C_LoginRet_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string userName = 4;
  void clear_username();
  static const int kUserNameFieldNumber = 4;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // int32 error = 1;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  ::google::protobuf::int32 error() const;
  void set_error(::google::protobuf::int32 value);

  // .LoginS2C.LoginRet loginRet = 2;
  void clear_loginret();
  static const int kLoginRetFieldNumber = 2;
  ::LoginS2C_LoginRet loginret() const;
  void set_loginret(::LoginS2C_LoginRet value);

  // int32 uid = 3;
  void clear_uid();
  static const int kUidFieldNumber = 3;
  ::google::protobuf::int32 uid() const;
  void set_uid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LoginS2C)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::int32 error_;
  int loginret_;
  ::google::protobuf::int32 uid_;
  mutable int _cached_size_;
  friend struct ::protobuf_LoginS2C_2eproto::TableStruct;
  friend void ::protobuf_LoginS2C_2eproto::InitDefaultsLoginS2CImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LoginS2C

// int32 error = 1;
inline void LoginS2C::clear_error() {
  error_ = 0;
}
inline ::google::protobuf::int32 LoginS2C::error() const {
  // @@protoc_insertion_point(field_get:LoginS2C.error)
  return error_;
}
inline void LoginS2C::set_error(::google::protobuf::int32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:LoginS2C.error)
}

// .LoginS2C.LoginRet loginRet = 2;
inline void LoginS2C::clear_loginret() {
  loginret_ = 0;
}
inline ::LoginS2C_LoginRet LoginS2C::loginret() const {
  // @@protoc_insertion_point(field_get:LoginS2C.loginRet)
  return static_cast< ::LoginS2C_LoginRet >(loginret_);
}
inline void LoginS2C::set_loginret(::LoginS2C_LoginRet value) {
  
  loginret_ = value;
  // @@protoc_insertion_point(field_set:LoginS2C.loginRet)
}

// int32 uid = 3;
inline void LoginS2C::clear_uid() {
  uid_ = 0;
}
inline ::google::protobuf::int32 LoginS2C::uid() const {
  // @@protoc_insertion_point(field_get:LoginS2C.uid)
  return uid_;
}
inline void LoginS2C::set_uid(::google::protobuf::int32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:LoginS2C.uid)
}

// string userName = 4;
inline void LoginS2C::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginS2C::username() const {
  // @@protoc_insertion_point(field_get:LoginS2C.userName)
  return username_.GetNoArena();
}
inline void LoginS2C::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LoginS2C.userName)
}
#if LANG_CXX11
inline void LoginS2C::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LoginS2C.userName)
}
#endif
inline void LoginS2C::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginS2C.userName)
}
inline void LoginS2C::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginS2C.userName)
}
inline ::std::string* LoginS2C::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:LoginS2C.userName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginS2C::release_username() {
  // @@protoc_insertion_point(field_release:LoginS2C.userName)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginS2C::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:LoginS2C.userName)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::LoginS2C_LoginRet> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LoginS2C_LoginRet>() {
  return ::LoginS2C_LoginRet_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_LoginS2C_2eproto__INCLUDED
